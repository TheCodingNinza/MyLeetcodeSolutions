import javafx.util.Pair;

import java.util.*;

public class MinimizeMalwareSpread {

    public class DSU{
        private Pair<Integer,String>[] arr;

        public DSU(int n) {
            this.arr = new Pair[n];
            for (int i = 0; i < this.arr.length; i++) {
                this.arr[i] = new Pair<>(-1,"NI");
            }
        }

        public int findParent(int index){
            int itr = index;
            while (this.arr[itr].getKey() != -1){
                itr = this.arr[itr].getKey();
            }
            return itr;
        }

        public void union(int indexA, int indexB){
            int pA = findParent(indexA);
            int pB = findParent(indexB);
            if(pA != pB){
                Pair<Integer,String> tmp = new Pair<>(pA, this.arr[indexB].getValue());
                this.arr[pB] = tmp;
            }
        }

        public void markInfected(int index){
            Pair<Integer,String> tmp = new Pair<>(this.arr[index].getKey(), "I");
            this.arr[index] = tmp;
        }

        public List<List<Integer>> maxSizeGroup(){
            Map<Integer,List<Integer>> adj = new HashMap<>();
            for (int i = 0; i < this.arr.length; i++) {
                int parent = findParent(i);
//                adj.getOrDefault(parent,new ArrayList<>()).add(i);
                List<Integer> tmp = new ArrayList<>();
                if(adj.containsKey(parent))
                    tmp = adj.get(parent);
                tmp.add(i);
                adj.put(parent,tmp);
            }
            for(Map.Entry<Integer, List<Integer>> entry: adj.entrySet()){
//                System.out.println("Key : " + entry.getKey());
//                for (int i = 0; i < entry.getValue().size(); i++) {
//                    System.out.print(entry.getValue().get(i)+"\t");
//                }
//                System.out.println("");
            }

            List<List<Integer>> ans = new ArrayList<>();
            int maxSize = Integer.MIN_VALUE;
            for(Map.Entry<Integer, List<Integer>> entry: adj.entrySet()){
                int localSize;
                if(findIfInfectedNotOne(entry.getValue())){
                    localSize = 0;
                }else{
                    localSize = entry.getValue().size();
                }
                if(localSize > maxSize){
                    maxSize = localSize;
                }
            }
            for(Map.Entry<Integer, List<Integer>> entry: adj.entrySet()){
                int localSize;
                if(findIfInfectedNotOne(entry.getValue())){
                    localSize = 0;
                }else{
                    localSize = entry.getValue().size();
                }
                if(localSize == maxSize){
                    ans.add(entry.getValue());
                }
            }
            return ans;
        }

        private boolean findIfInfectedNotOne(List<Integer> value) {
            int count = 0;
            for (int i = 0; i < value.size(); i++) {
                Pair<Integer,String> itr = this.arr[value.get(i)];
                if(itr.getValue() == "I"){
                    count++;
                }
            }
            if(count != 1){
                return true;
            }else{
                return false;
            }
        }

        public int findAnswer(){
            List<List<Integer>> tmp = maxSizeGroup();
//            System.out.println("==========================");
//            for(List<Integer> itr: tmp){
//                for (int i = 0; i < itr.size(); i++) {
//                    System.out.print(itr.get(i)+"\t");
//                }
//                System.out.println("");
//            }
//            System.out.println("==========================");
            int leastIndex = Integer.MAX_VALUE;
            for(List<Integer> itr: tmp){
                for (int i = 0; i < itr.size(); i++) {
                    if(this.arr[itr.get(i)].getValue() == "I"){
                        if(leastIndex > itr.get(i)){
                            leastIndex = itr.get(i);
                        }
                    }
                }
            }
            return leastIndex;
        }


        public void printArr(){
            for (int i = 0; i < this.arr.length; i++) {
                System.out.print(this.arr[i].getKey()+" : "+this.arr[i].getValue()+",\t");
            }
            System.out.println("");
        }
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        DSU dsu = new DSU(graph.length);
        for (int i = 0; i < graph.length; i++) {
            for (int j = 0; j < graph[0].length; j++) {
                if(graph[i][j] == 1 && i != j){
                    dsu.union(i,j);
                }
            }
        }
        for (int i = 0; i < initial.length; i++) {
            dsu.markInfected(initial[i]);
        }
//        dsu.printArr();
        int ans = dsu.findAnswer();
        return ans;
    }

    public static void main(String[] args) {
        int[][] graph = {{1,1,1},{1,1,1},{1,1,1}};
        int[] initial = {1,2};
        MinimizeMalwareSpread minMSpeed = new MinimizeMalwareSpread();
        System.out.println(minMSpeed.minMalwareSpread(graph,initial));

    }

}
